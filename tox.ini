[tox]
minversion = 3.20
envlist = lint, py{27, 36, 37, 38, 39, 310, 311}, darwin

[gh-actions]
# The "lint" job is run separately.
python =
    2.7: py27
    3.6: py36
    3.7: py37
    3.8: py38
    3.9: py39
    3.10: py310
    3.11: py311

[testenv:lint]
# Warning: This environment inherits settings from the main [testenv] section.
description = run code linters
basepython = python3
allowlist_externals =
    find
deps =
    flake8
    pylint
changedir = {toxinidir}
commands =
    # stop the build if there are Python syntax errors or undefined names
    flake8 . --config {toxinidir}/.flake8 --count --select=E9,F63,F7,F82 --show-source --statistics
    # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
    flake8 . --config {toxinidir}/.flake8 --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
    #find . -name .git -prune -false -o -name .tox -prune -false -o -iname '*.py' \
    #     -exec pylint -j 0 --rcfile {toxinidir}/.pylintrc \{\} +
    #pylint -j 0 --rcfile .pylintrc aliBuild aliDeps aliDoctor pb

[testenv]
description = run test suite under {envname}
# Commands we can call that aren't installed in the tox virtualenv.
allowlist_externals =
    sh
    git
    test
    touch
    sl
    rm
deps =
    py27: mock
    coverage
    distro

setenv =
    # `aliBuild analytics` puts preference files under $HOME.
    HOME = {envtmpdir}
    # On Python2, dictionary order depends on PYTHONHASHSEED, but we dump plain
    # dictionaries (not OrderedDicts!) straight into the package hashing
    # algorithm. Therefore, disable tox's hash seed randomisation on py27 to
    # ensure our dicts always have the same order. See also:
    # https://tox.wiki/en/latest/example/basic.html#special-handling-of-pythonhashseed
    py27: PYTHONHASHSEED = 0
    # Keep coverage info for later upload, if needed. Files in {envtmpdir} are
    # deleted after each run.
    COVERAGE_FILE = {toxworkdir}/coverage.{envname}
    ARCHITECTURE = slc7_x86-64
    darwin: ARCHITECTURE = osx_x86-64

changedir = {envtmpdir}
commands =
    # The first coverage command shouldn't have an -a, so we completely replace
    # the coverage info from the last run.
    coverage run --source={toxinidir} {toxinidir}/aliBuild analytics off
    test -e .config/alibuild/disable-analytics
    test ! -e .config/alibuild/analytics-uuid
    coverage run --source={toxinidir} -a {toxinidir}/aliBuild analytics on
    test ! -e .config/alibuild/disable-analytics
    test -e .config/alibuild/analytics-uuid
    coverage run --source={toxinidir} -a {toxinidir}/aliBuild analytics off
    test -e .config/alibuild/disable-analytics
    test -e .config/alibuild/analytics-uuid

    coverage run --source={toxinidir} -a {toxinidir}/aliBuild version

    coverage run --source={toxinidir} -a -m unittest discover {toxinidir}/tests

    git clone -b O2-v1.3.0 --depth 1 https://github.com/alisw/alidist

    coverage run --source={toxinidir} -a {toxinidir}/aliBuild -a {env:ARCHITECTURE} -z test-init init zlib
    # This command is expected to fail, but run it for the coverage anyway.
    # A leading "-" means tox ignores the exit code.
    - coverage run --source={toxinidir} -a {toxinidir}/aliBuild build non-existing -a {env:ARCHITECTURE} --no-system --disable GCC-Toolchain

    # TODO: do we need these? This seems to be at least partially covered by
    # unit tests in tests/tests_parseRecipe.py.
    sh -c 'coverage run --source={toxinidir} -a {toxinidir}/aliBuild -c {toxinidir}/tests/testdist build broken1 --force-unknown-architecture --no-system --disable GCC-Toolchain 2>&1 | tee /dev/stderr | grep "Header missing"'
    sh -c 'coverage run --source={toxinidir} -a {toxinidir}/aliBuild -c {toxinidir}/tests/testdist build broken2 --force-unknown-architecture --no-system --disable GCC-Toolchain 2>&1 | tee /dev/stderr | grep "Empty recipe"'
    sh -c 'coverage run --source={toxinidir} -a {toxinidir}/aliBuild -c {toxinidir}/tests/testdist build broken3 --force-unknown-architecture --no-system --disable GCC-Toolchain 2>&1 | tee /dev/stderr | grep "Unable to parse"'
    sh -c 'coverage run --source={toxinidir} -a {toxinidir}/aliBuild -c {toxinidir}/tests/testdist build broken4 --force-unknown-architecture --no-system --disable GCC-Toolchain 2>&1 | tee /dev/stderr | grep "Malformed header"'
    sh -c 'coverage run --source={toxinidir} -a {toxinidir}/aliBuild -c {toxinidir}/tests/testdist build broken5 --force-unknown-architecture --no-system --disable GCC-Toolchain 2>&1 | tee /dev/stderr | grep "Missing package"'
    sh -c 'coverage run --source={toxinidir} -a {toxinidir}/aliBuild -c {toxinidir}/tests/testdist build broken6 --force-unknown-architecture --no-system --disable GCC-Toolchain 2>&1 | tee /dev/stderr | grep "while scanning a quoted scalar"'
    sh -c 'coverage run --source={toxinidir} -a {toxinidir}/aliBuild -c {toxinidir}/tests/testdist build broken7 --force-unknown-architecture --no-system --disable GCC-Toolchain 2>&1 | tee /dev/stderr | grep "Malformed entry prefer_system"'

    coverage run --source={toxinidir} -a {toxinidir}/aliBuild build zlib -a {env:ARCHITECTURE} --no-system --disable GCC-Toolchain
    alienv -a {env:ARCHITECTURE} q
    alienv -a {env:ARCHITECTURE} setenv zlib/latest -c bash -c '[[ $LD_LIBRARY_PATH == */zlib/* ]]'
    coverage run --source={toxinidir} -a {toxinidir}/aliBuild -a {env:ARCHITECTURE} doctor AliPhysics
    coverage run --source={toxinidir} -a {toxinidir}/aliBuild -a {env:ARCHITECTURE} build zlib --dry-run
    py311: coverage run --source={toxinidir} -a {toxinidir}/aliBuild --aggressive-cleanup --docker -a slc7_x86-64 --always-prefer-system -d build zlib
    # Test for devel packages
    coverage run --source={toxinidir} -a {toxinidir}/aliBuild init zlib
    py311: coverage run --source={toxinidir} -a {toxinidir}/aliBuild --aggressive-cleanup --docker -a slc7_x86-64 --always-prefer-system -d build zlib
    # Test that we complain if we have a devel package with an untracked file
    coverage run --source={toxinidir} -a {toxinidir}/aliBuild init zlib
    touch zlib/foo
    coverage run --source={toxinidir} -a {toxinidir}/aliBuild -a {env:ARCHITECTURE} --no-system --disable GCC-Toolchain build zlib
    coverage run --source={envsitepackagesdir} -a -m unittest discover {toxinidir}/tests
    # On Darwin we also test sapling support
    darwin: sl clone https://github.com/alisw/alidist alidist-sapling
    darwin: coverage run --source={toxinidir} -a {toxinidir}/aliBuild -a {env:ARCHITECTURE} -c alidist-sapling --no-system --disable GCC-Toolchain build zlib
    darwin: rm -fr zlib
    darwin: sl clone https://github.com/alisw/zlib
    darwin: coverage run --source={toxinidir} -a {toxinidir}/aliBuild -a {env:ARCHITECTURE} --no-system --disable GCC-Toolchain build zlib
    touch zlib/foo
    darwin: coverage run --source={toxinidir} -a {toxinidir}/aliBuild -a {env:ARCHITECTURE} --no-system --disable GCC-Toolchain build zlib

[coverage:run]
branch = True
include =
    */alibuild*/*
    */.tox/*/lib/*/alibuild_helpers/*

[coverage:report]
exclude_lines =
    # Don't complain if tests don't hit defensive assertion code:
    raise AssertionError
    raise NotImplementedError
    # Don't complain if non-runnable code isn't run:
    if __name__ == .__main__.:
